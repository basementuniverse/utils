const memoize=e=>{var t={};return function(...r){return t[r]??(t[r]=e.apply(this,r))}},floatEquals=(e,t,r=Number.EPSILON)=>Math.abs(e-t)<r,clamp=(e,t=0,r=1)=>e<t?t:e>r?r:e,frac=e=>e>=0?e-Math.floor(e):e-Math.ceil(e),round=(e,t=0)=>{const r=Math.pow(10,t);return Math.round(e*r+Number.EPSILON)/r},lerp=(e,t,r)=>e+(t-e)*r,unlerp=(e,t,r)=>(r-e)/(t-e),blerp=(e,t,r,a,n,l)=>lerp(lerp(e,t,n),lerp(r,a,n),l),remap=(e,t,r,a,n)=>a+(e-t)*(n-a)/(r-t),smoothstep=(e,t,r)=>lerp(e,t,3*Math.pow(r,2)-2*Math.pow(r,3)),radians=e=>Math.PI/180*e,degrees=e=>180/Math.PI*e,randomBetween=(e,t)=>Math.random()*(t-e)+e,randomIntBetween=(e,t)=>Math.floor(Math.random()*(t-e+1))+e,cltRandom=(e=.5,t=.5,r=2)=>{let a=0;for(let e=r;e--;)a+=Math.random();return e+(a-r/2)/(r/2)*t},cltRandomInt=(e,t)=>Math.floor(e+cltRandom(.5,.5,2)*(t+1-e)),weightedRandom=e=>{let t=e.reduce(((e,t)=>e+t),0),r=0;const a=Math.random()*t;for(;t>a;)t-=e[r++];return r-1},lerpArray=(e,t,r=lerp)=>{const a=t*(e.length-1),n=clamp(Math.trunc(a),0,e.length-1);return r(e[n]||0,e[n+1]||0,frac(a))},dot=(e,t)=>e.reduce(((e,r,a)=>e+r*t[a]),0),factorial=e=>{let t=1;for(let r=2;r<=e;r++)t*=r;return t},npr=(e,t)=>factorial(e)/factorial(e-t),ncr=(e,t)=>factorial(e)/(factorial(t)*factorial(e-t)),permutations=(e,t)=>1===t?e.map((e=>[e])):e.reduce(((r,a,n)=>[...r,...permutations(e.slice(0,n).concat(e.slice(n+1)),t-1).map((e=>[a,...e]))]),[]),combinations=(e,t)=>1===t?e.map((e=>[e])):e.reduce(((r,a,n)=>[...r,...combinations(e.slice(n+1),t-1).map((e=>[a,...e]))]),[]),cartesian=(...e)=>e.reduce(((e,t)=>e.flatMap((e=>t.map((t=>[...e,t]))))),[[]]),times=(e,t)=>Array(t).fill(0).map(((t,r)=>e(r))),range=e=>times((e=>e),e),zip=(e,t)=>e.map(((e,r)=>[e,t[r]])),at=(e,t)=>e[t<0?e.length-Math.abs(t+1)%e.length-1:t%e.length],peek=e=>{if(e.length)return e[e.length-1]},chunk=(e,t)=>times((r=>e.slice(r*t,r*t+t)),Math.ceil(e.length/t)),shuffle=e=>e.slice().sort((()=>Math.random()-.5)),flat=(e,t=".")=>Object.keys(e).reduce(((r,a)=>{if(e[a]instanceof Date)return{...r,[a]:e[a].toISOString()};if("object"!=typeof e[a]||!e[a])return{...r,[a]:e[a]};const n=flat(e[a],t);return{...r,...Object.keys(n).reduce(((e,r)=>({...e,[`${a}${t}${r}`]:n[r]})),{})}}),{}),unflat=(e,t=".")=>{let r,a,n,l,o={};for(n in e){for(a=n.split(t),r=o,l=0;l<a.length-1;l++)a[l]in r||(isFinite(a[l+1])?r[a[l]]=[]:r[a[l]]={}),r=r[a[l]];r[a[a.length-1]]=e[n]}return o},split=(e,t)=>{const r=[];let a=[];for(const n of e)t(n)?(a.length&&r.push(a),a=[n]):a.push(n);return r.push(a),r},pluck=(e,...t)=>t.reduce(((t,r)=>Object.assign(t,{[r]:e[r]})),{}),exclude=(e,...t)=>Object.fromEntries(Object.entries(e).filter((([e])=>!t.includes(e))));"undefined"!=typeof module&&(module.exports={memoize:memoize,floatEquals:floatEquals,clamp:clamp,frac:frac,round:round,lerp:lerp,unlerp:unlerp,blerp:blerp,remap:remap,smoothstep:smoothstep,radians:radians,degrees:degrees,randomBetween:randomBetween,randomIntBetween:randomIntBetween,cltRandom:cltRandom,cltRandomInt:cltRandomInt,weightedRandom:weightedRandom,lerpArray:lerpArray,dot:dot,factorial:factorial,npr:npr,ncr:ncr,permutations:permutations,combinations:combinations,cartesian:cartesian,times:times,range:range,zip:zip,at:at,peek:peek,chunk:chunk,shuffle:shuffle,flat:flat,unflat:unflat,split:split,pluck:pluck,exclude:exclude});